Define a family of algorithms, encapsulate each one, and make them interchangeable.
The Strategy pattern lets the algorithm vary independently from clients that use ut.

Animal - super class
- flyingType: Flies
- tryToFly(): String
- setFlyingAbility(Flies): void
Dog, Bird extends Animal

Animal HAS A Relationship with Flies interface

Flies Interface
- fly(): String
ItFlies, CannotFly - implements Flies interface

When to use the Strategy Pattern
When you want to define a class that will have one behavior that is similar to other behaviors in a list.

I want the class object to be able to choose from
- Not flying
- Fly with wings
- Fly super fast

When you need to use one of several behaviors dynamically

Often reduces long lists of conditionals
Avoids duplocaate code
Keeps class changes from forcing other class changes
Can hide complicated/secret cide frin the user
Nagative: Increased number of objects/Classes